{"is_source_file": true, "format": "Python", "description": "This file defines database models and functions for managing tic-tac-toe game data, including creating, updating, retrieving, and listing game records using SQLAlchemy ORM.", "external_files": ["os", "contextlib", "typing", "sqlalchemy", "json"], "external_methods": ["os.getenv", "contextlib.contextmanager", "sqlalchemy.create_engine", "sqlalchemy.ext.declarative.declarative_base", "sqlalchemy.orm.sessionmaker", "sqlalchemy.sql.func.now", "json.dumps", "json.loads"], "published": ["create_game", "update_game", "get_game", "list_games"], "classes": [{"name": "Game", "description": "SQLAlchemy model representing a tic-tac-toe game, including attributes for moves, board state, status, winner, and timestamps."}], "methods": [{"name": "get_db()", "description": "Context manager that provides a database session and ensures it is properly closed after use.", "scope": "", "scopeKind": ""}, {"name": "int create_game(moves, board, status, winner=None)", "description": "Creates a new game record in the database and returns its database ID.", "scope": "", "scopeKind": ""}, {"name": "None update_game(game_id: int, moves, board, status, winner=None, finished_at=None)", "description": "Updates an existing game record with new data, raising an error if the game is not found.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_game(game_id: int)", "description": "Retrieves a game record by ID, returning a dictionary with game details or None if not found.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_games(limit: int = 20, offset: int = 0)", "description": "Lists recent game records with optional limit and offset, returning a list of game detail dictionaries.", "scope": "", "scopeKind": ""}], "calls": ["os.getenv", "create_engine", "declarative_base", "sessionmaker", "func.now", "json.dumps", "json.loads", "db.query", "db.commit", "db.refresh"], "search-terms": ["SQLAlchemy Game model", "tic-tac-toe database handling", "create_game", "update_game", "get_game", "list_games"], "state": 2, "file_id": 11, "knowledge_revision": 23, "git_revision": "", "ctags": [{"_type": "tag", "name": "Base", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^Base = declarative_base()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DB_URL", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^DB_URL = os.getenv(\"TIC_TAC_TOE_DATABASE_URL\", \"sqlite:\\/\\/\\/.\\/tic_tac_toe.db\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "Game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^class Game(Base):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SessionLocal", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "__tablename__", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    __tablename__ = \"games\"$/", "file": true, "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    board = Column(Text, nullable=False)  # JSON-encoded 2d board$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "create_game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^def create_game(moves, board, status, winner=None) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "function", "signature": "(moves, board, status, winner=None)"}, {"_type": "tag", "name": "created_at", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    created_at = Column(DateTime(timezone=True), server_default=func.now())$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "engine", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^engine = create_engine(DB_URL, connect_args={\"check_same_thread\": False} if DB_URL.startswith(\"s/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "finished_at", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    finished_at = Column(DateTime(timezone=True), nullable=True)$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^def get_db():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^def get_game(game_id: int) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(game_id: int)"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    id = Column(Integer, primary_key=True, index=True)$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "list_games", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^def list_games(limit: int = 20, offset: int = 0) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "(limit: int = 20, offset: int = 0)"}, {"_type": "tag", "name": "moves", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    moves = Column(Text, nullable=False)  # JSON-encoded list of moves dicts$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    status = Column(String(32), nullable=False)$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}, {"_type": "tag", "name": "update_game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^def update_game(game_id: int, moves, board, status, winner=None, finished_at=None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(game_id: int, moves, board, status, winner=None, finished_at=None)"}, {"_type": "tag", "name": "winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-application-e68ddb25/tic_tac_toe_backend/src/api/database.py", "pattern": "/^    winner = Column(String(8), nullable=True)$/", "language": "Python", "kind": "variable", "scope": "Game", "scopeKind": "class"}], "hash": "ebaccd6b3c7f740a280aebf3281bf8e0", "format-version": 4, "code-base-name": "tic_tac_toe_backend", "filename": "tic_tac_toe_backend/src/api/database.py", "fields": [{"name": "Base = declarative_base()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "DB_URL = os.getenv(\"TIC_TAC_TOE_DATABASE_URL\", \"sqlite:\\/\\/\\/.\\/tic_tac_toe.db\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "__tablename__ = \"games\"", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "board = Column(Text, nullable=False)  # JSON-encoded 2d board", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "created_at = Column(DateTime(timezone=True), server_default=func.now())", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "engine = create_engine(DB_URL, connect_args={\"check_same_thread\": False} if DB_URL.startswith(\"s/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "finished_at = Column(DateTime(timezone=True), nullable=True)", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "id = Column(Integer, primary_key=True, index=True)", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "moves = Column(Text, nullable=False)  # JSON-encoded list of moves dicts", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "status = Column(String(32), nullable=False)", "scope": "Game", "scopeKind": "class", "description": "unavailable"}, {"name": "winner = Column(String(8), nullable=True)", "scope": "Game", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"23": ""}]}